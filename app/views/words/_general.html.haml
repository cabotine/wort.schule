- content_for :page_title do
  = word.name

- if any_present?(word, %i[meaning meaning_long hierarchy topics]) || word.image.attached?
  = two_column_card t('words.show.general.title'), t('words.show.general.description') do
    = box padding: false do
      = box_description_list do |list|
        = render(list.add(Word.human_attribute_name(:type))) do
          = word.class.model_name.human

        - if word.image.attached?
          = render(list.add(Word.human_attribute_name(:image))) do
            = image_tag word.image

        = render(list.add(Word.human_attribute_name(:meaning))) do
          - if word.meaning.present? || word.meaning_long.present?
            %div
              = word.meaning
              %p.text-sm.mt-2= word.meaning_long if word.meaning_long.present?

        = render(list.add(Word.human_attribute_name(:hierarchy))) do
          - if word.hierarchy.present?
            .flex.flex-wrap= hierarchy_breadcrumbs word.hierarchy

        = render(list.add(Word.human_attribute_name(:topics))) do
          = separate word.topics do |topic|
            = link_to_if can?(:read, topic), topic.name, topic

= two_column_card t('words.show.word_properties.title'), t('words.show.word_properties.description') do
  = box padding: false do
    = box_description_list do |list|
      = render(list.add(Word.human_attribute_name(:syllables))) do
        = word.syllables

      = render(list.add(Word.human_attribute_name(:written_syllables))) do
        = word.written_syllables

      = render(list.add(Word.human_attribute_name(:prototype))) do
        = word.prototype&.humanize

      = render(list.add(Word.human_attribute_name(:foreign))) do
        = word.foreign&.humanize

      = render(list.add(Word.human_attribute_name(:compound))) do
        = word.compound&.humanize

      = render(list.add(Word.human_attribute_name(:prefix_id))) do
        = word.prefix&.name

      = render(list.add(Word.human_attribute_name(:postfix_id))) do
        = word.postfix&.name

      = render(list.add(Word.human_attribute_name(:strategies))) do
        = separate word.strategies do |strategy|
          = link_to_if can?(:read, strategy), strategy.name, strategy

      = render(list.add(Word.human_attribute_name(:phenomenons))) do
        = separate word.phenomenons do |phenomenon|
          = link_to_if can?(:read, phenomenon), phenomenon.name, phenomenon

      = render(list.add(Word.human_attribute_name(:compound_entities))) do
        = separate word.compound_entities do |compound_entity|
          = link_to_if can?(:read, compound_entity.part), compound_entity.part.name, compound_entity.part

- if any_present? word, %i[synonyms opposites keywords rimes]
  = two_column_card t('words.show.relations.title'), t('words.show.relations.description') do
    = box padding: false do
      = box_description_list do |list|
        = render(list.add(Word.human_attribute_name(:synonyms))) do
          = separate word.synonyms do |synonym|
            = link_to_if can?(:read, synonym.actable), synonym.name, synonym.actable

        = render(list.add(Word.human_attribute_name(:opposites))) do
          = separate word.opposites do |opposite|
            = link_to_if can?(:read, opposite.actable), opposite.name, opposite.actable

        = render(list.add(Word.human_attribute_name(:keywords))) do
          = separate word.keywords do |keyword|
            = link_to_if can?(:read, keyword.actable), keyword.name, keyword.actable

        = render(list.add(Word.human_attribute_name(:rimes))) do
          = separate word.rimes do |rime|
            = link_to_if can?(:read, rime.actable), rime.name, rime.actable

= render 'words/card_select', word:
